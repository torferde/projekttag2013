#! /usr/bin/env ruby
require 'erb'
require 'redcarpet'
require 'yaml'
require 'thor'
require 'fileutils'

include FileUtils

BASE_DIR      = File.expand_path('../../', __FILE__)
ASSETS_DIR    = File.join(BASE_DIR, 'assets')
GENERATOR_DIR = File.join(BASE_DIR, 'generator')
TEMPLATES_DIR = File.join(GENERATOR_DIR, 'templates')
SRC_DIR       = File.join(BASE_DIR, 'src')
DEST_DIR       = File.join(BASE_DIR, 'dest')
COMPILEABLE_FILES = Dir.glob(File.join(SRC_DIR, '/**/*.md'))

module Projekttag
  def template name
    if File.exists?(name)
      return File.read(name)
    else
      filename = File.join(TEMPLATES_DIR, name)
      %w{.md .html .html.erb}.each do |ext|
        tmpl = filename + ext
        return File.read(tmpl) if File.exists? tmpl
      end
    end
    raise Errno::ENOENT, "Template #{name}[.{md,html,html.erb}] not found."
  end

  def config
    @config ||= YAML.load_file(File.join(GENERATOR_DIR, 'config.yml'))
  end
  module_function :config

  class Page
    include Projekttag

    attr_reader :current_page, :source_file

    def initialize page, opts={}
      if opts[:is_content]
        @content = page
        @dest_file = opts[:dest_file]
      else
        @source_file = page
        page = File.basename(page, '.md') if page.include?('/')
        @current_page = page
      end
    end

    def link_to anchor, target, options={}
      options = { :class => nil, :id => nil }.
        merge(options).
        to_a.reduce("") do|opts, (key,value)|
          opts << "#{key}=\"#{value}\" " if value
          opts
        end
      "<a #{options.strip} href=\"#{target}\">#{anchor}</a>"
    end

    def current_page? target
      return true if current_page == target
    end

    def menu_links
      @menu_link ||= config['menu'].sort
    end

    def render_menu
      render_template('partials/menu')
    end

    def render_content
      if @content
        markdown(@content)
      else
        render_template(source_file, :markdown => true)
      end
    end

    def render
      render_template('partials/main')
    end

    def target_file
      if @dest_file
        @dest_file
      else
        File.join(DEST_DIR, "#{current_page}.html")
      end
    end

    def write
      puts "Generating #{target_file} ..."
      File.open(target_file, 'w') do |f|
        f.write render
      end
    end

  private

    def render_template t, options={}
      options = { :minimize => false, :markdown => false }.merge(options)
      t = template(t)
      result = ERB.new(t, 0, "").result(binding)
      result = markdown(result) if options[:markdown]
      result.gsub(/^\s+/, '').gsub(/^$/m, '') if options[:minimize]
      result
    end

    def markdown text
      result = Redcarpet::Markdown.new(Redcarpet::Render::HTML, :lax_spacing => true, :autolink => true, :space_after_headers => true).render(text)
    end

  end # class Page
end # module Projekttag

class Generator < Thor

  CHMOD_DIRS = 'find -type d -exec chmod a+rx {} \;'
  CHMOD_FILES = 'find -type f -exec chmod a+r {} \;'
  SERVER_CP_CMD = "rsync -rvulthzP"

  desc "configure", "copies config.yml"
  def configure
    src = File.join(GENERATOR_DIR, "config.yml.example")
    dest = File.join(GENERATOR_DIR, "config.yml")
    cp src, dest unless File.exists?(dest)
  end

  desc "build", "generate pages"
  method_option :force, :aliases => "-f", :desc => "Force writing of every file."
  def build
    configure
    symlink_assets
    COMPILEABLE_FILES.each do |file|
      page = Projekttag::Page.new file
      target = page.target_file
      modified = !File.exists?(target) || File.mtime(file) > File.mtime(target)
      page.write if options[:force] || modified
    end
    projectslist
  end

  desc "clean", "removes generated files"
  def clean
    rm Dir.glob(File.join(DEST_DIR, "/*"))
  end

  desc "assets", "symlink the assets to the dest dir"
  def symlink_assets
    assets_link = File.join(DEST_DIR, "assets")
    system("cd #{DEST_DIR} && ln -s ../assets assets") unless File.exists?(assets_link)
  end

  desc "projectslist", "generate picturesque projects list"
  def projectslist
    images = Dir.glob(File.join(ASSETS_DIR, "img/projects/*"))
    projects = images.map{|img| File.basename(img, ".*") }
    index = 0
    md_list = projects.map do |project|
      image = images[index].match(/assets\/.+$/).to_s
      md = "[![#{config_file['menu'][project]}](#{image})](#{project}.html)"
      index += 1
      md
    end
    projects_file = File.join(DEST_DIR, "projekte.html")
    page = Projekttag::Page.new(md_list.join("\n"),
                                is_content: true,
                                dest_file: projects_file)
    page.write
  end

  desc "deploy", "deploy to server"
  option :serverpath,
          default: nil,
          desc: "Supply the path to and on server.",
          aliases: "-s"
  option :build,
          type: :boolean,
          desc: "Ensures a current build, before deploying",
          aliases: "-b"
  option :verbose,
          type: :boolean,
          desc: "Be verbose...",
          aliases: "-v"
  def deploy
    spit = ->(text) {puts(text) if options[:verbose]}
    serverpath = options[:serverpath]
    serverpath ||= config_file[:serverpath]
    die "Couldn't find a server setting" unless serverpath
    build if options[:build]
    server = serverpath
    if serverpath.include?(':')
      server, path = serverpath.split(':')
    else
      serverpath
    end
    spit.call "##-> Updating/Copying files to: #{serverpath}"
    copy_to serverpath, :files, :assets
    spit.call "##-> Updating/Copying done"
    spit.call "##########################"
    spit.call "##-> Performing file mode changes on server"
    perform_on server, path, CHMOD_DIRS, CHMOD_FILES
    spit.call "##-> Mode changes done..."
    spit.call "###-> Finished <-###"
  end

  no_commands do

    def config_file
      @@config ||= YAML.load_file(File.join(GENERATOR_DIR, 'config.yml'))
    end

    def copy_to(serverpath, *which_files)
      cmd = "#{SERVER_CP_CMD} "
      cmd << "#{DEST_DIR}/*.html " if which_files.include?(:files)
      cmd << "#{ASSETS_DIR} " if which_files.include?(:assets)
      cmd << serverpath
      system cmd
    end

    def perform_on(server, in_path, *commands)
      cmd = "ssh #{server} \""
      cmd << "cd #{in_path} && "
      cmd << commands.join(' && ')
      cmd << "\""
      system cmd
    end

    def die(string)
      $stderr.puts string
      exit(1)
    end

  end
end

Generator.start(ARGV)
